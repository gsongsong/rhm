{"version":3,"sources":["utils.ts","components/EnumTable.tsx","components/PkgTable.tsx","components/EnumSelector.tsx","components/ChangeTable.tsx","components/ReleaseTable.tsx","components/VersionComponent.tsx","components/VersionEditor.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["accumulateChangeList","changeListAccumulated","customerIndex","versionList","indexPrev","versionNext","find","version","index","changeList","releaseList","release","customerIndexList","includes","push","filter","change","length","findEmptyIndex","indexList","sort","a","b","reduce","indent","input","replace","publishPerCustomer","versionIndex","lineupList","pkgList","customer","candidateLineupIndexList","map","lineup","console","log","name","group","releaseHistoryPerLineupList","forEach","lineupIndex","releaseHistory","publishPerLineup","releaseHistoryPerLineup","lineupFound","lineupName","join","groupEnd","changeListPerPkgList","releaseFound","pkgIndex","pkg","pkgFound","pkgName","pkgLineupIndex","changeLineupIndex","undefined","changeListPerPkg","changes","description","beforeChange","afterChange","EnumTable","title","enumList","onChange","usedIndexList","useState","editIndex","setEditIndex","setName","nameNew","setNameNew","addEnumItem","enumItem","enumListNew","localeCompare","onSubmitRename","indexFound","findIndex","slice","Table","celled","compact","selectable","Header","Row","HeaderCell","Body","active","Cell","Form","onSubmit","Field","disabled","value","e","target","Button","icon","size","onClick","onClickEdit","removeEnumItem","PkgTable","usedPkgIndexList","setLineupIndex","lineupIndexNew","setLineupIndexNew","pkgListNew","onSubmitEditPkg","removePkg","EnumSelector","selectedIndexList","selected","selectedIndex","color","Label","as","selectedIndexListNew","toggle","Icon","ChangeTable","customerList","setDescription","setBeforeChange","setAfterChange","setCustomerIndexList","descriptionNew","setDescriptionNew","beforeChangeNew","setBeforeChangeNew","afterChangeNew","setAfterChangeNew","customerIndexListNew","setCustomerIndexListNew","onSubmitEditChange","changeListNew","rowSpan","colSpan","TextArea","className","Fragment","changeFound","removeChange","ReleaseTable","setPkgIndex","pkgIndexNew","setPkgIndexNew","onSubmitEditRelease","releaseListNew","removeRelease","moveOlder","moveNewer","VersionComponent","versionPrevFound","Divider","horizontal","Subheader","versionRest","versionNew","VersionEditor","setIndexPrev","indexPrevNew","setIndexPrevNew","openModal","setOpenModal","setReleaseHistory","setIndex","onSubmitEditVersion","versionListNew","onClickPublish","releaseHistoryPerCustomerIndexListList","i","cil1","rh1","j","cil2","splice","relaseHistoryPerCustomerIndexList","customerNameJoined","publish","namePrev","versionReferringFound","versionFound","removeVersion","Modal","open","onClose","Content","rows","Actions","navigator","clipboard","writeText","UNTITLED","PANE_VERSION","PANE_LINEUP","PANE_PACKAGE","PANE_CUSTOMER","App","file","refLoad","createRef","refSave","featureName","setFeatureName","setVersionList","setLineupList","setPkgList","setCustomerList","pane","setPane","reader","FileReader","onload","result","ArrayBuffer","indexLast","lastIndexOf","substring","JSON","parse","usedLineupIndexList","indexPrevList","usedCustomerIndexList","indexListPrev","Menu","pointing","Item","current","click","blob","Blob","stringify","type","download","href","window","URL","createObjectURL","onClickSave","position","accept","hidden","ref","files","readAsText","Container","Segment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6f97307.chunk.js","sourcesContent":["import { Change, Enum, Pkg, Version } from \"./types\";\n\ntype ReleaseHistoryPerCustomerIndexList = {\n  customerIndexList: number[];\n  releaseHistory: string;\n}\n\ntype ReleaseHistoryPerLineupIndex = {\n  lineupIndex: number;\n  releaseHistory: string;\n}\n\ntype ReleaseHistoryPerPkg = {\n  pkgName: string;\n  changeList: Change[];\n};\n\nfunction accumulateChangeList(\n  changeListAccumulated: Change[], customerIndex: number,\n  versionList: Version[], indexPrev: number,\n) {\n  let versionNext = versionList.find((version) => version.index === indexPrev);\n  while (versionNext) {\n    if (!versionNext) {\n      return versionNext;\n    }\n    const { indexPrev, changeList, releaseList } = versionNext;\n    const releaseFound = releaseList.find((release) => release.customerIndexList.includes(customerIndex));\n    if (releaseFound) {\n      break;\n    }\n    changeListAccumulated.push(\n      ...changeList.filter((change) => {\n        const { customerIndexList } = change;\n        return !customerIndexList.length || customerIndexList.includes(customerIndex);\n      })\n    );\n    versionNext = versionList.find((version) => version.index === indexPrev);\n  }\n  return versionNext;\n}\n\nexport function findEmptyIndex(indexList: number[]) {\n  return indexList\n    .sort((a, b) => a - b)\n    .reduce((indexPrev, index) => {\n      if (index === indexPrev) {\n        return indexPrev + 1;\n      }\n      return indexPrev;\n    }, 0);\n}\n\nexport function getEnumNameList(enumList: Enum[], indexList: number[]) {\n  return enumList\n    .filter((enumItem) => indexList.includes(enumItem.index))\n    .map((enumItem) => enumItem.name);\n}\n\nfunction indent(input: string) {\n  return input.replace(/^/gm, '    ');\n}\n\nexport function publish(versionList: Version[], versionIndex: number, lineupList: Enum[], pkgList: Pkg[], customerList: Enum[]) {\n  console.log('Publishing release history...');\n  console.group();\n  const releaseHistoryPerCustomerIndexListList: ReleaseHistoryPerCustomerIndexList[] = [];\n  // Generate\n  customerList.forEach((customer) => {\n    releaseHistoryPerCustomerIndexListList.push({\n      customerIndexList: [customer.index],\n      releaseHistory: publishPerCustomer(versionList, versionIndex, lineupList, pkgList, customer),\n    });\n  });\n  // Merge\n  for (let i = releaseHistoryPerCustomerIndexListList.length - 1; i >= 0; i -= 1) {\n    const { customerIndexList: cil1, releaseHistory: rh1 } = releaseHistoryPerCustomerIndexListList[i];\n    for (let j = i - 1; j >= 0; j -= 1) {\n      const { customerIndexList: cil2, releaseHistory: rh2 } = releaseHistoryPerCustomerIndexListList[j];\n      if (rh1 === rh2) {\n        cil2.push(...cil1);\n        releaseHistoryPerCustomerIndexListList.splice(i, 1);\n        break;\n      }\n    }\n  }\n  // Export\n  const releaseHistory = releaseHistoryPerCustomerIndexListList\n    .filter((relaseHistoryPerCustomerIndexList) => relaseHistoryPerCustomerIndexList.releaseHistory)\n    .map((relaseHistoryPerCustomerIndexList) => {\n      const { customerIndexList, releaseHistory } = relaseHistoryPerCustomerIndexList;\n      const customerNameJoined = getEnumNameList(customerList, customerIndexList).join(', ');\n      return `<${customerNameJoined}>\n${indent(releaseHistory)}\n</${customerNameJoined}>`;\n    }).join('\\n');\n  console.groupEnd();\n  return releaseHistory;\n}\n\nfunction publishPerCustomer(versionList: Version[], versionIndex: number, lineupList: Enum[], pkgList: Pkg[], customer: Enum) {\n  const candidateLineupIndexList = [-1, ...lineupList.map((lineup) => lineup.index)];\n  console.log(customer.name);\n  console.group();\n  const releaseHistoryPerLineupList: ReleaseHistoryPerLineupIndex[] = [];\n  candidateLineupIndexList.forEach((lineupIndex) => {\n    releaseHistoryPerLineupList.push({\n      lineupIndex,\n      releaseHistory: publishPerLineup(versionList, versionIndex, lineupIndex, pkgList, customer),\n    });\n  })\n  const releaseHistory = releaseHistoryPerLineupList\n    .filter((releaseHistoryPerLineup) => releaseHistoryPerLineup.releaseHistory)\n    .map((releaseHistoryPerLineup) => {\n      const { lineupIndex, releaseHistory } = releaseHistoryPerLineup;\n      const lineupFound = lineupList.find((lineup) => lineup.index === lineupIndex);\n      if (!lineupFound) {\n        return indent(releaseHistory);\n      } else {\n        const lineupName = lineupFound.name;\n        return `<${lineupName}>\n${indent(releaseHistory)}\n</${lineupName}>`;\n      }\n    }).join('\\n');\n  console.groupEnd();\n  return releaseHistory;\n}\n\nfunction publishPerLineup(versionList: Version[], versionIndex: number, lineupIndex: number, pkgList: Pkg[], customer: Enum) {\n  let versionNext = versionList.find((version) => version.index === versionIndex);\n  const { index: customerIndex } = customer;\n  const changeListPerPkgList: ReleaseHistoryPerPkg[] = [];\n  while(versionNext) {\n    const { name, indexPrev, changeList, releaseList } = versionNext;\n    console.log(`Version: ${name}. Previous version: ${indexPrev}`);\n    console.group();\n    // Check the current version is released\n    const releaseFound = releaseList.find((release) => {\n      const customerIncluded = release.customerIndexList.includes(customerIndex);\n      if (!customerIncluded) {\n        return false;\n      }\n      const { pkgIndex } = release;\n      const pkgFound = pkgList.find((pkg) => pkg.lineupIndex === lineupIndex && pkg.index === pkgIndex);\n      return !!pkgFound;\n    });\n    console.log(releaseFound);\n    // If the current version is not released, it is not for the given customer\n    if (!releaseFound) {\n      versionNext = undefined;\n    } else {\n      const { pkgIndex } = releaseFound;\n      const pkgFound = pkgList.find((pkg) => pkg.index === pkgIndex);\n      if (!pkgFound) {\n        // This is not going to happen\n        break;\n      } else {\n        const { name: pkgName, lineupIndex: pkgLineupIndex } = pkgFound;\n        const changeListAccumulated = [\n          ...changeList.filter((change) => {\n            const { customerIndexList, lineupIndex: changeLineupIndex } = change;\n            return (!customerIndexList.length || customerIndexList.includes(customerIndex))\n                   && pkgLineupIndex === changeLineupIndex;\n          }),\n        ];\n        // Accumulate unreleased versions and get the second latest released version\n        versionNext = accumulateChangeList(changeListAccumulated, customerIndex, versionList, indexPrev);\n        changeListPerPkgList.push({ pkgName, changeList: changeListAccumulated });\n      }\n    }\n    console.groupEnd();\n  }\n  const releaseHistory = changeListPerPkgList.map((changeListPerPkg) => {\n    const { pkgName, changeList } = changeListPerPkg;\n    const changes = changeList.map((change) => {\n      const { description, beforeChange, afterChange } = change;\n      return `[Description]\n${indent(description)}\n[Before change]\n${indent(beforeChange)}\n[After change]\n${indent(afterChange)}`;\n    }).join('\\n');\n    return `${pkgName}\n${indent(changes)}`\n  }).join('\\n');\n  return releaseHistory;\n}\n","import { useState } from \"react\";\nimport { Button, Form, Table } from \"semantic-ui-react\";\nimport { Enum } from \"../types\";\nimport { findEmptyIndex } from \"../utils\";\n\ntype Props = {\n  title: string;\n  enumList: Enum[];\n  onChange: (enumList: Enum[]) => void;\n  usedIndexList?: number[];\n};\n\nexport default function EnumTable({ title, enumList, onChange, usedIndexList }: Props) {\n  const [editIndex, setEditIndex] = useState(-1);\n  const [name, setName] = useState('');\n  const [nameNew, setNameNew] = useState('');\n\n  function addEnumItem() {\n    if (!name) {\n      return;\n    }\n    const enumItemFound = enumList.find((enumItem) => enumItem.name === name);\n    if (enumItemFound) {\n      return;\n    }\n    const index = findEmptyIndex(enumList.map((enumItem) => enumItem.index));\n    const enumListNew = [\n      ...enumList,\n      { index, name },\n    ].sort((a, b) => a.name.localeCompare(b.name));\n    onChange(enumListNew);\n    setName('');\n  }\n\n  function onClickEdit(index: number) {\n    const enumItem = enumList.find((enumItem) => enumItem.index === index);\n    if (!enumItem) {\n      return;\n    }\n    setNameNew(enumItem.name);\n    setEditIndex(index);\n  }\n\n  function onSubmitRename(index: number) {\n    if (!nameNew) {\n      return;\n    }\n    const enumItemFound = enumList.find((enumItem) => enumItem.index !== index && enumItem.name === nameNew);\n    if (enumItemFound) {\n      return;\n    }\n    const indexFound = enumList.findIndex((enumItem) => enumItem.index === index);\n    if (indexFound === -1) {\n      return;\n    }\n    const enumListNew = [\n      ...enumList.slice(0, indexFound),\n      { index, name: nameNew },\n      ...enumList.slice(indexFound + 1),\n    ];\n    onChange(enumListNew);\n    setEditIndex(-1);\n  }\n\n  function removeEnumItem(index: number) {\n    if (usedIndexList && usedIndexList.includes(index)) {\n      return;\n    }\n    const indexFound = enumList.findIndex((enumItem) => enumItem.index === index);\n    if (indexFound === -1) {\n      return;\n    }\n    const enumListNew = [\n      ...enumList.slice(0, indexFound),\n      ...enumList.slice(indexFound + 1),\n    ];\n    onChange(enumListNew);\n  }\n\n  return (\n    <Table celled compact selectable>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>{title}</Table.HeaderCell>\n          <Table.HeaderCell>Actions</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        <Table.Row active>\n          <Table.Cell>\n            <Form onSubmit={addEnumItem}>\n              <Form.Field disabled={editIndex !== -1}>\n                <input value={name} onChange={(e) => setName(e.target.value)} />\n              </Form.Field>\n            </Form>\n          </Table.Cell>\n          <Table.Cell>\n            <Button\n              icon='plus' size='tiny'\n              onClick={addEnumItem}\n              disabled={editIndex !== -1}\n            />\n          </Table.Cell>\n        </Table.Row>\n        {\n          enumList.map((enumItem) => {\n            const { index, name } = enumItem;\n            return index === editIndex ? (\n              <Table.Row key={index}>\n                <Table.Cell>\n                  <Form onSubmit={() => onSubmitRename(index)}>\n                    <Form.Field>\n                      <input value={nameNew} onChange={(e) => setNameNew(e.target.value)} />\n                    </Form.Field>\n                  </Form>\n                </Table.Cell>\n                <Table.Cell>\n                  <Button icon='check' size='tiny' onClick={() => onSubmitRename(index)} />\n                  <Button icon='cancel' size='tiny' onClick={() => setEditIndex(-1)} />\n                </Table.Cell>\n              </Table.Row>\n            ) : (\n              <Table.Row key={index}>\n                <Table.Cell>{name}</Table.Cell>\n                <Table.Cell>\n                  <Button icon='edit' size='tiny' onClick={() => onClickEdit(index)} />\n                  <Button icon='trash' size='tiny' onClick={() => removeEnumItem(index)}\n                    disabled={usedIndexList && usedIndexList.includes(index)}\n                  />\n                </Table.Cell>\n              </Table.Row>\n            )\n          })\n        }\n      </Table.Body>\n    </Table>\n  );\n}\n","import { useState } from \"react\";\nimport { Button, Form, Table } from \"semantic-ui-react\";\nimport { Enum, Pkg } from \"../types\";\nimport { findEmptyIndex } from \"../utils\";\n\ntype Props = {\n  pkgList: Pkg[];\n  lineupList: Enum[];\n  onChange: (pkgList: Pkg[]) => void;\n  usedPkgIndexList?: number[];\n};\n\nexport default function PkgTable({ pkgList, lineupList, onChange, usedPkgIndexList }: Props) {\n  const [editIndex, setEditIndex] = useState(-1);\n  const [name, setName] = useState('');\n  const [lineupIndex, setLineupIndex] = useState(-1);\n  const [nameNew, setNameNew] = useState('');\n  const [lineupIndexNew, setLineupIndexNew] = useState(-1);\n\n  function addPkg() {\n    if (!name) {\n      return;\n    }\n    const pkgFound = pkgList.find((pkg) => pkg.name === name);\n    if (pkgFound) {\n      return;\n    }\n    const index = findEmptyIndex(pkgList.map((pkg) => pkg.index));\n    const pkgListNew = [\n      ...pkgList,\n      { index, name, lineupIndex },\n    ].sort((a, b) => a.name.localeCompare(b.name));\n    onChange(pkgListNew);\n    setName('');\n  }\n\n  function onClickEdit(index: number) {\n    const pkgFound = pkgList.find((pkg) => pkg.index === index);\n    if (!pkgFound) {\n      return;\n    }\n    setNameNew(pkgFound.name);\n    setLineupIndexNew(pkgFound.lineupIndex);\n    setEditIndex(index);\n  }\n\n  function onSubmitEditPkg(index: number) {\n    if (!nameNew) {\n      return;\n    }\n    const pkgFound = pkgList.find((pkg) => pkg.index !== index && pkg.name === nameNew);\n    if (pkgFound) {\n      return;\n    }\n    const indexFound = pkgList.findIndex((pkg) => pkg.index === index);\n    if (indexFound === -1) {\n      return;\n    }\n    const pkgListNew = [\n      ...pkgList.slice(0, indexFound),\n      { index, name: nameNew, lineupIndex: lineupIndexNew },\n      ...pkgList.slice(indexFound + 1),\n    ];\n    onChange(pkgListNew);\n    setEditIndex(-1);\n  }\n\n  function removePkg(index: number) {\n    if (usedPkgIndexList && usedPkgIndexList.includes(index)) {\n      return;\n    }\n    const indexFound = pkgList.findIndex((pkg) => pkg.index === index);\n    if (indexFound === -1) {\n      return;\n    }\n    const enumListNew = [\n      ...pkgList.slice(0, indexFound),\n      ...pkgList.slice(indexFound + 1),\n    ];\n    onChange(enumListNew);\n  }\n\n  return (\n    <Table celled compact selectable>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Package</Table.HeaderCell>\n          <Table.HeaderCell>Lineup</Table.HeaderCell>\n          <Table.HeaderCell>Actions</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        <Table.Row active>\n          <Table.Cell>\n            <Form>\n              <Form.Field disabled={editIndex !== -1}>\n                <input value={name} onChange={(e) => setName(e.target.value)} />\n              </Form.Field>\n            </Form>\n          </Table.Cell>\n          <Table.Cell>\n            <Form>\n              <Form.Field disabled={editIndex !== -1}>\n                <select value={lineupIndex} onChange={(e) => setLineupIndex(+e.target.value)}>\n                  <option value={-1}>(None)</option>\n                  {\n                    lineupList.map((lineup) => {\n                      const { index, name} = lineup;\n                      return (\n                        <option key={index} value={index}>{name}</option>\n                      );\n                    })\n                  }\n                </select>\n              </Form.Field>\n            </Form>\n          </Table.Cell>\n          <Table.Cell>\n            <Button\n              icon='plus' size='tiny'\n              onClick={addPkg}\n              disabled={editIndex !== -1}\n            />\n          </Table.Cell>\n        </Table.Row>\n        {\n          pkgList.map((pkg) => {\n            const { index, name, lineupIndex } = pkg;\n            const lineupFound = lineupList.find((lineup) => lineup.index === lineupIndex);\n            const lineup = lineupFound ? lineupFound.name : '(None)';\n            return index === editIndex ? (\n              <Table.Row key={index}>\n                <Table.Cell>\n                  <Form>\n                    <Form.Field>\n                      <input value={nameNew} onChange={(e) => setNameNew(e.target.value)} />\n                    </Form.Field>\n                  </Form>\n                </Table.Cell>\n                <Table.Cell>\n                  <Form>\n                    <Form.Field>\n                      <select value={lineupIndexNew} onChange={(e) => setLineupIndexNew(+e.target.value)}>\n                        <option value={-1}>(None)</option>\n                        {\n                          lineupList.map((lineup) => {\n                            const { index, name } = lineup;\n                            return (\n                              <option key={index} value={index}>{name}</option>\n                            )\n                          })\n                        }\n                      </select>\n                    </Form.Field>\n                  </Form>\n                </Table.Cell>\n                <Table.Cell>\n                  <Button icon='check' size='tiny' onClick={() => onSubmitEditPkg(index)} />\n                  <Button icon='cancel' size='tiny' onClick={() => setEditIndex(-1)} />\n                </Table.Cell>\n              </Table.Row>\n            ) : (\n              <Table.Row key={index}>\n                <Table.Cell>{name}</Table.Cell>\n                <Table.Cell>{lineup}</Table.Cell>\n                <Table.Cell>\n                  <Button icon='edit' size='tiny' onClick={() => onClickEdit(index)} />\n                  <Button icon='trash' size='tiny' onClick={() => removePkg(index)}\n                    disabled={usedPkgIndexList && usedPkgIndexList.includes(index)}\n                  />\n                </Table.Cell>\n              </Table.Row>\n            )\n          })\n        }\n      </Table.Body>\n    </Table>\n  );\n}\n","import { Icon, Label } from \"semantic-ui-react\";\nimport { Enum } from \"../types\";\n\ntype Props = {\n  enumList: Enum[];\n  selectedIndexList: number[];\n  onChange: (selectedIndexList: number[]) => void;\n  disabled?: boolean;\n};\n\nexport default function EnumSelector({ enumList, selectedIndexList, onChange, disabled }: Props) {\n  function toggle(index: number) {\n    if (disabled) {\n      return;\n    }\n    const indexFound = selectedIndexList.findIndex((selectedIndex) => selectedIndex === index);\n    const selectedIndexListNew = indexFound === -1 ? [\n      ...selectedIndexList,\n      index,\n    ] : [\n      ...selectedIndexList.slice(0, indexFound),\n      ...selectedIndexList.slice(indexFound + 1),\n    ];\n    onChange(selectedIndexListNew);\n  }\n\n  return (\n    <>\n      {\n        enumList.map((enumItem) => {\n          const { index, name } = enumItem;\n          const selected = selectedIndexList.find((selectedIndex) => selectedIndex=== index) !== undefined;\n          const color = selected ? 'blue' : undefined;\n          const icon = selected ? 'plus' : 'minus';\n          return (\n            <Label key={index} as='a' color={color} onClick={() => toggle(index)}>\n              <Icon name={icon} />\n              {name}\n            </Label>\n          )\n        })\n      }\n    </>\n  );\n}\n","import React from \"react\";\nimport { useState } from \"react\";\nimport { Button, Form, Table, TextArea } from \"semantic-ui-react\";\nimport { Change, Enum } from \"../types\";\nimport { findEmptyIndex } from \"../utils\";\nimport EnumSelector from \"./EnumSelector\";\n\nconst COLSPAN = 4;\nconst ROWSPAN = 2;\n\ntype Props = {\n  changeList: Change[];\n  lineupList: Enum[];\n  customerList: Enum[];\n  onChange: (changeList: Change[]) => void;\n};\n\nexport default function ChangeTable({\n  changeList, lineupList, customerList,\n  onChange,\n}: Props) {\n  const [description, setDescription] = useState('');\n  const [beforeChange, setBeforeChange] = useState('');\n  const [afterChange, setAfterChange] = useState('');\n  const [customerIndexList, setCustomerIndexList] = useState<number[]>([]);\n  const [lineupIndex, setLineupIndex] = useState(-1);\n  const [editIndex, setEditIndex] = useState(-1);\n  const [descriptionNew, setDescriptionNew] = useState('');\n  const [beforeChangeNew, setBeforeChangeNew] = useState('');\n  const [afterChangeNew, setAfterChangeNew] = useState('');\n  const [customerIndexListNew, setCustomerIndexListNew] = useState<number[]>([]);\n  const [lineupIndexNew, setLineupIndexNew] = useState(-1);\n\n  function addChange() {\n    if (!description) {\n      return;\n    }\n    const index = findEmptyIndex(changeList.map((change) => change.index));\n    const changeListNew = [\n      ...changeList,\n      { index, description, beforeChange, afterChange, customerIndexList, lineupIndex },\n    ];\n    onChange(changeListNew);\n    setDescription('');\n    setBeforeChange('');\n    setAfterChange('');\n    setCustomerIndexList([]);\n    setLineupIndex(0);\n  }\n\n  function onClickEdit(index: number) {\n    const changeFound = changeList.find((change) => change.index === index);\n    if (!changeFound) {\n      return;\n    }\n    const { description, beforeChange, afterChange, lineupIndex, customerIndexList } = changeFound;\n    setDescriptionNew(description);\n    setBeforeChangeNew(beforeChange);\n    setAfterChangeNew(afterChange);\n    setLineupIndexNew(lineupIndex);\n    setCustomerIndexListNew(customerIndexList);\n    setEditIndex(index);\n  }\n\n  function onSubmitEditChange() {\n    const indexFound = changeList.findIndex((change) => change.index === editIndex);\n    if (indexFound === -1) {\n      return;\n    }\n    const changeListNew = [\n      ...changeList.slice(0, indexFound),\n      {\n        index: editIndex,\n        description: descriptionNew,\n        beforeChange: beforeChangeNew,\n        afterChange: afterChangeNew,\n        customerIndexList: customerIndexListNew,\n        lineupIndex: lineupIndexNew,\n      },\n      ...changeList.slice(indexFound + 1),\n    ];\n    onChange(changeListNew);\n    setEditIndex(-1);\n  }\n\n  function removeChange(index: number) {\n    const indexFound = changeList.findIndex((change) => change.index === index);\n    const changeListNew = [\n      ...changeList.slice(0, indexFound),\n      ...changeList.slice(indexFound + 1),\n    ];\n    onChange(changeListNew);\n  }\n\n  return (\n    <Table celled compact selectable>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Description</Table.HeaderCell>\n          <Table.HeaderCell>Before change</Table.HeaderCell>\n          <Table.HeaderCell>After change</Table.HeaderCell>\n          <Table.HeaderCell>Lineup</Table.HeaderCell>\n          <Table.HeaderCell rowSpan={ROWSPAN}>Actions</Table.HeaderCell>\n        </Table.Row>\n        <Table.Row>\n          <Table.HeaderCell colSpan={COLSPAN}>Customers</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        <Table.Row active>\n          <Table.Cell>\n            <Form>\n              <Form.Field disabled={editIndex !== -1}>\n                <TextArea value={description} onChange={(e) => setDescription(e.target.value)}\n                  className='no-resize-textarea'\n                />\n              </Form.Field>\n            </Form>\n          </Table.Cell>\n          <Table.Cell>\n            <Form>\n              <Form.Field disabled={editIndex !== -1}>\n                <TextArea value={beforeChange} onChange={(e) => setBeforeChange(e.target.value)}\n                  className='no-resize-textarea'\n                />\n              </Form.Field>\n            </Form>\n          </Table.Cell>\n          <Table.Cell>\n            <Form>\n              <Form.Field disabled={editIndex !== -1}>\n                <TextArea value={afterChange} onChange={(e) => setAfterChange(e.target.value)}\n                  className='no-resize-textarea'\n                />\n              </Form.Field>\n            </Form>\n          </Table.Cell>\n          <Table.Cell>\n            <Form>\n              <Form.Field disabled={editIndex !== -1}>\n                <select value={lineupIndex} onChange={(e) => setLineupIndex(+e.target.value)}>\n                  <option value={-1}>(None)</option>\n                  {\n                    lineupList.map((lineup) => {\n                      const { index, name } = lineup;\n                      return (\n                        <option key={index} value={index}>{name}</option>\n                      )\n                    })\n                  }\n                </select>\n              </Form.Field>\n            </Form>\n          </Table.Cell>\n          <Table.Cell rowSpan={ROWSPAN}>\n            <Button icon='plus' size='tiny' onClick={addChange} disabled={editIndex !== -1} />\n          </Table.Cell>\n        </Table.Row>\n        <Table.Row active>\n          <Table.Cell colSpan={COLSPAN}>\n            <EnumSelector enumList={customerList} selectedIndexList={customerIndexList}\n              onChange={setCustomerIndexList}\n              disabled={editIndex !== -1}\n            />\n          </Table.Cell>\n        </Table.Row>\n        {\n          changeList.map((change) => {\n            const { index, description, beforeChange, afterChange, customerIndexList, lineupIndex } = change;\n            const lineupFound = lineupList.find((lineup) => lineup.index === lineupIndex);\n            const lineup = lineupFound ? lineupFound.name : '(None)';\n            return index === editIndex ? (\n              <React.Fragment key={index}>\n                <Table.Row>\n                  <Table.Cell>\n                    <Form>\n                      <Form.Field>\n                        <TextArea value={descriptionNew} onChange={(e) => setDescriptionNew(e.target.value)}\n                          className='no-resize-textarea'\n                        />\n                      </Form.Field>\n                    </Form>\n                  </Table.Cell>\n                  <Table.Cell>\n                    <Form>\n                      <Form.Field>\n                        <TextArea value={beforeChangeNew} onChange={(e) => setBeforeChangeNew(e.target.value)}\n                          className='no-resize-textarea'\n                        />\n                      </Form.Field>\n                    </Form>\n                  </Table.Cell>\n                  <Table.Cell>\n                    <Form>\n                      <Form.Field>\n                        <TextArea value={afterChangeNew} onChange={(e) => setAfterChangeNew(e.target.value)}\n                          className='no-resize-textarea'\n                        />\n                      </Form.Field>\n                    </Form>\n                  </Table.Cell>\n                  <Table.Cell>\n                    <Form>\n                      <Form.Field>\n                        <select value={lineupIndexNew} onChange={(e) => setLineupIndexNew(+e.target.value)}>\n                          <option value={-1}>(None)</option>\n                          {\n                            lineupList.map((lineup) => {\n                              const { index, name } = lineup;\n                              return (\n                                <option key={index} value={index}>{name}</option>\n                              )\n                            })\n                          }\n                        </select>\n                      </Form.Field>\n                    </Form>\n                  </Table.Cell>\n                  <Table.Cell rowSpan={ROWSPAN}>\n                    <Button icon='check' size='tiny' onClick={onSubmitEditChange} />\n                    <Button icon='cancel' size='tiny' onClick={() => setEditIndex(-1)} />\n                  </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Cell colSpan={COLSPAN}>\n                    <EnumSelector enumList={customerList} selectedIndexList={customerIndexListNew}\n                      onChange={setCustomerIndexListNew}\n                    />\n                  </Table.Cell>\n                </Table.Row>\n              </React.Fragment>\n            ) : (\n              <React.Fragment key={index}>\n                <Table.Row>\n                  <Table.Cell>\n                    <Form>\n                      <Form.Field>\n                        <TextArea value={description} className='no-border-textarea no-resize-textarea' />\n                      </Form.Field>\n                    </Form>\n                  </Table.Cell>\n                  <Table.Cell>\n                    <Form>\n                      <Form.Field>\n                        <TextArea value={beforeChange} className='no-border-textarea no-resize-textarea' />\n                      </Form.Field>\n                    </Form>\n                  </Table.Cell>\n                  <Table.Cell>\n                    <Form>\n                      <Form.Field>\n                        <TextArea value={afterChange} className='no-border-textarea no-resize-textarea' />\n                      </Form.Field>\n                    </Form>\n                  </Table.Cell>\n                  <Table.Cell>{lineup}</Table.Cell>\n                  <Table.Cell rowSpan={ROWSPAN}>\n                    <Button icon='edit' size='tiny' onClick={() => onClickEdit(index)} />\n                    <Button icon='trash' size='tiny' onClick={() => removeChange(index)} />\n                  </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Cell colSpan={COLSPAN}>\n                    {\n                      customerList\n                        .filter((customer) => customerIndexList.find((customerIndex) => customer.index === customerIndex) !== undefined)\n                        .map((customer) => customer.name)\n                        .join(', ')\n                    }\n                  </Table.Cell>\n                </Table.Row>\n              </React.Fragment>\n            )\n          })\n        }\n      </Table.Body>\n      {\n        changeList.map((change) => <></>)\n      }\n    </Table>\n  )\n}\n","import React from \"react\";\nimport { useState } from \"react\";\nimport { Button, Form, Icon, Table } from \"semantic-ui-react\";\nimport { Enum, Pkg, Release } from \"../types\";\nimport { findEmptyIndex } from \"../utils\";\nimport EnumSelector from \"./EnumSelector\";\n\ntype Props ={ \n  releaseList: Release[];\n  lineupList: Enum[];\n  pkgList: Pkg[];\n  customerList: Enum[];\n  onChange: (releaseList: Release[]) => void;\n}\n\nexport default function ReleaseTable({\n  releaseList, lineupList, pkgList, customerList,\n  onChange,\n}: Props) {\n  const [pkgIndex, setPkgIndex] = useState(-1);\n  const [customerIndexList, setCustomerIndexList] = useState<number[]>([]);\n  const [editIndex, setEditIndex] = useState(-1);\n  const [pkgIndexNew, setPkgIndexNew] = useState(-1);\n  const [customerIndexListNew, setCustomerIndexListNew] = useState<number[]>([]);\n\n  function addRelease() {\n    if (pkgIndex === -1) {\n      return;\n    }\n    if (!customerIndexList.length) {\n      return;\n    }\n    const releaseFound = releaseList.find((release) => release.pkgIndex === pkgIndex);\n    if (releaseFound) {\n      return;\n    }\n    const index = findEmptyIndex(releaseList.map((release) => release.index));\n    const releaseListNew = [\n      ...releaseList,\n      { index, pkgIndex, customerIndexList },\n    ];\n    onChange(releaseListNew);\n    setPkgIndex(-1);\n    setCustomerIndexList([]);\n  }\n\n  function moveNewer(index: number) {\n    const indexFound = releaseList.findIndex((release) => release.index === index);\n    if (indexFound === -1) {\n      return;\n    }\n    if (indexFound === releaseList.length - 1) {\n      return;\n    }\n    const releaseListNew = [\n      ...releaseList.slice(0, indexFound),\n      releaseList[indexFound + 1],\n      releaseList[indexFound],\n      ...releaseList.slice(indexFound + 2),\n    ];\n    onChange(releaseListNew);\n  }\n\n  function moveOlder(index: number) {\n    const indexFound = releaseList.findIndex((release) => release.index === index);\n    if (indexFound === -1) {\n      return;\n    }\n    if (indexFound === 0) {\n      return;\n    }\n    const releaseListNew = [\n      ...releaseList.slice(0, indexFound - 1),\n      releaseList[indexFound],\n      releaseList[indexFound - 1],\n      ...releaseList.slice(indexFound + 1),\n    ];\n    onChange(releaseListNew);\n  }\n\n  function onClickEdit(index: number) {\n    const releaseFound = releaseList.find((release) => release.index === index);\n    if (!releaseFound) {\n      return;\n    }\n    const { pkgIndex, customerIndexList } = releaseFound;\n    const pkgFound = pkgList.find((pkg) => pkg.index === pkgIndex);\n    if (!pkgFound) {\n      return;\n    }\n    setPkgIndexNew(pkgIndex);\n    setCustomerIndexListNew(customerIndexList);\n    setEditIndex(index);\n  }\n\n  function onSubmitEditRelease() {\n    if (!customerIndexListNew.length) {\n      return;\n    }\n    const releaseFound = releaseList.find((release) => release.index !== editIndex && release.pkgIndex === pkgIndexNew);\n    if (releaseFound) {\n      return;\n    }\n    const indexFound = releaseList.findIndex((release) => release.index === editIndex);\n    if (indexFound === -1) {\n      return;\n    }\n    const releaseListNew = [\n      ...releaseList.slice(0, indexFound),\n      {\n        index: editIndex,\n        pkgIndex: pkgIndexNew,\n        customerIndexList: customerIndexListNew,\n      },\n      ...releaseList.slice(indexFound + 1),\n    ];\n    onChange(releaseListNew);\n    setEditIndex(-1);\n  }\n\n  function removeRelease(index: number) {\n    const indexFound = releaseList.findIndex((release) => release.index === index);\n    if (indexFound === -1) {\n      return;\n    }\n    const releaseListNew = [\n      ...releaseList.slice(0, indexFound),\n      ...releaseList.slice(indexFound + 1),\n    ];\n    onChange(releaseListNew);\n  }\n\n  return (\n    <Table celled compact selectable>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Package</Table.HeaderCell>\n          <Table.HeaderCell rowSpan={2}>Actions</Table.HeaderCell>\n        </Table.Row>\n        <Table.Row>\n          <Table.HeaderCell>Customers</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        <Table.Row active>\n          <Table.Cell>\n            <Form>\n              <Form.Field disabled={editIndex !== -1}>\n                <select value={pkgIndex} onChange={(e) => setPkgIndex(+e.target.value)}>\n                  <option value={-1}>Select a package</option>\n                  {\n                    pkgList.map((pkg) => {\n                      const { index, name, lineupIndex } = pkg;\n                      const lineupFound = lineupList.find((lineup) => lineup.index === lineupIndex);\n                      const lineup = `- Lineup: ${lineupFound ? lineupFound.name : '(None)'}`;\n                      return (\n                        <option key={index} value={index}>{name} {lineup}</option>\n                      )\n                    })\n                  }\n                </select>\n              </Form.Field>\n            </Form>\n          </Table.Cell>\n          <Table.Cell rowSpan={2}>\n            <Button icon='plus' size='tiny' onClick={addRelease} disabled={editIndex !== -1} />\n          </Table.Cell>\n        </Table.Row>\n        <Table.Row active>\n          <Table.Cell>\n            <EnumSelector enumList={customerList} selectedIndexList={customerIndexList}\n              onChange={setCustomerIndexList}\n              disabled={editIndex !== -1}\n            />\n          </Table.Cell>\n        </Table.Row>\n        {\n          releaseList.map((release) => {\n            const { index, pkgIndex, customerIndexList }= release;\n            const pkgFound = pkgList.find((pkg) => pkg.index === pkgIndex) as Pkg;\n            const { name, lineupIndex } = pkgFound;\n            const lineupFound = lineupList.find((lineup) => lineup.index === lineupIndex);\n            const lineup = `- Lineup: ${lineupFound ? lineupFound.name : '(None)'}`;\n            return index === editIndex ? (\n              <React.Fragment key={index}>\n                <Table.Row>\n                  <Table.Cell>\n                    <Form>\n                      <Form.Field>\n                        <select value={pkgIndexNew} onChange={(e) => setPkgIndexNew(+e.target.value)}>\n                          {\n                            pkgList.map((pkg) => {\n                              const { index, name, lineupIndex } = pkg;\n                              const lineupFound = lineupList.find((lineup) => lineup.index === lineupIndex);\n                              const lineup = `- Lineup: ${lineupFound ? lineupFound.name : '(None)'}`;\n                              return (\n                                <option key={index} value={index}>{name} {lineup}</option>\n                              )\n                            })\n                          }\n                        </select>\n                      </Form.Field>\n                    </Form>\n                  </Table.Cell>\n                  <Table.Cell rowSpan={2}>\n                    <Button icon='check' size='tiny' onClick={onSubmitEditRelease} />\n                    <Button icon='cancel' size='tiny' onClick={() => setEditIndex(-1)} />\n                  </Table.Cell>\n                </Table.Row>\n                <Table.Row key={`${index}-lower`}>\n                  <Table.Cell>\n                    <EnumSelector enumList={customerList} selectedIndexList={customerIndexListNew}\n                      onChange={setCustomerIndexListNew}\n                    />\n                  </Table.Cell>\n                </Table.Row>\n              </React.Fragment>\n            ) : (\n              <React.Fragment key={index}>\n                <Table.Row>\n                  <Table.Cell>\n                    {name} {lineup}\n                  </Table.Cell>\n                  <Table.Cell rowSpan={2}>\n                    <Button icon='edit' size='tiny' onClick={() => onClickEdit(index)} />\n                    <Button icon='trash' size='tiny' onClick={() => removeRelease(index)} />\n                    <Button icon size='tiny' onClick={() => moveOlder(index)} disabled={editIndex !== -1}>\n                      <Icon name='angle up' />\n                      Older\n                    </Button>\n                    <Button icon size='tiny' onClick={() => moveNewer(index)} disabled={editIndex !== -1}>\n                      <Icon name='angle down' />\n                      Newer\n                    </Button>\n                  </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Cell>\n                    {\n                      customerList\n                        .filter((customer) => customerIndexList.find((customerIndex) => customer.index === customerIndex) !== undefined)\n                        .map((customer) => customer.name)\n                        .join(', ')\n                    }\n                  </Table.Cell>\n                </Table.Row>\n              </React.Fragment>\n            )\n          })\n        }\n      </Table.Body>\n    </Table>\n  )\n}\n","import { Divider, Header } from \"semantic-ui-react\";\nimport { Change, Enum, Pkg, Release, Version } from \"../types\";\nimport ChangeTable from \"./ChangeTable\";\nimport ReleaseTable from \"./ReleaseTable\";\n\ntype Props = {\n  version: Version;\n  versionList: Version[];\n  lineupList: Enum[];\n  pkgList: Pkg[];\n  customerList: Enum[];\n  onChange: (version: Version) => void;\n};\n\nexport default function VersionComponent({\n  version, versionList, lineupList, pkgList, customerList,\n  onChange,\n}: Props) {\n  const { name, indexPrev, changeList, releaseList } = version;\n  const versionPrevFound = versionList.find((version) => version.index === indexPrev);\n\n  function onChangeChangeList(changeList: Change[]) {\n    const { changeList: changeListOld, ...versionRest } = version;\n    const versionNew = { ...versionRest, changeList };\n    onChange(versionNew);\n  }\n\n  function onChangeReleaseList(releaseList: Release[]) {\n    const { releaseList: releaseListOld, ...versionRest } = version;\n    const versionNew = { ...versionRest, releaseList };\n    onChange(versionNew);\n  }\n\n  return (\n    <>\n      <Divider horizontal>\n        <Header as='h2'>\n          {name}\n          <Header.Subheader>Previous version: {versionPrevFound ? versionPrevFound.name : '(None)'}</Header.Subheader>\n        </Header>\n      </Divider>\n      <Header as='h3'>\n        Releases\n      </Header>\n      <ReleaseTable\n        releaseList={releaseList} lineupList={lineupList} pkgList={pkgList} customerList={customerList}\n        onChange={onChangeReleaseList}\n      />\n      <Header as='h3'>\n        Changes\n      </Header>\n      <ChangeTable\n        changeList={changeList} lineupList={lineupList} customerList={customerList}\n        onChange={onChangeChangeList}\n      />\n    </>\n  );\n}\n","import { useState } from \"react\";\nimport { Button, Form, Icon, Modal, Table, TextArea } from \"semantic-ui-react\";\nimport { Enum, Pkg, Version } from \"../types\";\nimport { findEmptyIndex, publish } from \"../utils\";\nimport VersionComponent from \"./VersionComponent\";\n\ntype Props = {\n  versionList: Version[];\n  onChange: (versionList: Version[]) => void;\n  lineupList: Enum[];\n  pkgList: Pkg[];\n  customerList: Enum[];\n};\n\nexport default function VersionEditor({ versionList, onChange, lineupList, pkgList, customerList }: Props) {\n  const [name, setName] = useState('');\n  const [indexPrev, setIndexPrev] = useState(-1);\n  const [editIndex, setEditIndex] = useState(-1);\n  const [nameNew, setNameNew] = useState('');\n  const [indexPrevNew, setIndexPrevNew] = useState(-1);\n  const [openModal, setOpenModal] = useState(false);\n  const [releaseHistory, setReleaseHistory] = useState('');\n\n  const [index, setIndex] = useState<number>();\n\n  function addVersion() {\n    if (!name) {\n      return;\n    }\n    const versionFound = versionList.find((version) => version.name === name);\n    if (versionFound) {\n      return;\n    }\n    const index = findEmptyIndex(versionList.map((version) => version.index));\n    const versionListNew = [\n      ...versionList,\n      { index, name, indexPrev, changeList: [], releaseList: [] },\n    ];\n    onChange(versionListNew);\n    setName('');\n  }\n\n  function onChangeVersion(version: Version) {\n    const { index } = version;\n    const indexFound = versionList.findIndex((version) => version.index === index);\n    if (indexFound === -1) {\n      return;\n    }\n    const versionListNew = [\n      ...versionList.slice(0, indexFound),\n      version,\n      ...versionList.slice(indexFound + 1),\n    ];\n    onChange(versionListNew);\n  }\n\n  function onClickEdit(index: number) {\n    const versionFound = versionList.find((version) => version.index === index);\n    if (!versionFound) {\n      return;\n    }\n    setNameNew(versionFound.name);\n    setIndexPrevNew(versionFound.indexPrev);\n    setEditIndex(versionFound.index);\n  }\n\n  function onSubmitEditVersion() {\n    if (!nameNew) {\n      return;\n    }\n    const versionFound = versionList.find((version) => version.index !== editIndex && version.name === nameNew);\n    if (versionFound) {\n      return;\n    }\n    const indexFound = versionList.findIndex((version) => version.index === editIndex);\n    if (indexFound === -1) {\n      return;\n    }\n    const { changeList, releaseList } = versionList[indexFound];\n    const versionListNew = [\n      ...versionList.slice(0, indexFound),\n      {\n        index: editIndex,\n        name: nameNew,\n        indexPrev: indexPrevNew,\n        changeList,\n        releaseList,\n      },\n      ...versionList.slice(indexFound + 1),\n    ];\n    onChange(versionListNew);\n    setEditIndex(-1);\n  }\n\n  function onClickPublish(index: number) {\n    const releaseHistory = publish(versionList, index, lineupList, pkgList, customerList);\n    setReleaseHistory(releaseHistory);\n    setOpenModal(true);\n  }\n\n  function removeVersion(index: number) {\n    const indexFound = versionList.findIndex((version) => version.index === index);\n    if (indexFound === -1) {\n      return;\n    }\n    const versionListNew = [\n      ...versionList.slice(0, indexFound),\n      ...versionList.slice(indexFound + 1),\n    ];\n    onChange(versionListNew);\n  }\n\n  const version = index === undefined ? versionList[0] : versionList.find((version) => version.index === index);\n  return (\n    <>\n      <Table celled compact selectable>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Version</Table.HeaderCell>\n            <Table.HeaderCell>Previous version</Table.HeaderCell>\n            <Table.HeaderCell>Actions</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          <Table.Row active>\n            <Table.Cell>\n              <Form>\n                <Form.Field disabled={editIndex !== -1}>\n                  <input value={name} onChange={(e) => setName(e.target.value)} />\n                </Form.Field>\n              </Form>\n            </Table.Cell>\n            <Table.Cell>\n              <Form>\n                <Form.Field disabled={editIndex !== -1}>\n                  <select value={indexPrev} onChange={(e) => setIndexPrev(+e.target.value)}>\n                    <option value={-1}>(None)</option>\n                    {\n                      versionList.map((version) => {\n                        const { index, name } = version;\n                        return (\n                          <option key={index} value={index}>{name}</option>\n                        )\n                      })\n                    }\n                  </select>\n                </Form.Field>\n              </Form>\n            </Table.Cell>\n            <Table.Cell>\n              <Button icon='plus' size='tiny' onClick={addVersion} disabled={editIndex !== -1} />\n            </Table.Cell>\n          </Table.Row>\n          {\n            versionList.map((version) => {\n              const { index, name, indexPrev } = version;\n              if (index === editIndex) {\n                return (\n                  <Table.Row key={index}>\n                    <Table.Cell>\n                      <Form>\n                        <Form.Field>\n                          <input value={nameNew} onChange={(e) => setNameNew(e.target.value)} />\n                        </Form.Field>\n                      </Form>\n                    </Table.Cell>\n                    <Table.Cell>\n                      <Form>\n                        <Form.Field>\n                          <select value={indexPrevNew} onChange={(e) => setIndexPrevNew(+e.target.value)}>\n                            <option value={-1}>(None)</option>\n                            {\n                              versionList.map((version) => {\n                                const { index, name } = version;\n                                return (\n                                  <option key={index} value={index}>{name}</option>\n                                )\n                              })\n                            }\n                          </select>\n                        </Form.Field>\n                      </Form>\n                    </Table.Cell>\n                    <Table.Cell>\n                      <Button icon='check' size='tiny' onClick={onSubmitEditVersion} />\n                      <Button icon='cancel' size='tiny' onClick={() => setEditIndex(-1)} />\n                    </Table.Cell>\n                  </Table.Row>\n                )\n              }\n              const versionPrevFound = versionList.find((version) => version.index === indexPrev);\n              const namePrev = versionPrevFound ? versionPrevFound.name : '(None)';\n              const versionReferringFound = !!versionList.find((version) => version.indexPrev === index);\n              return (\n                <Table.Row key={index}>\n                  <Table.Cell>\n                    <button className='a-like-button' onClick={() => setIndex(index)}>{name}</button>\n                    </Table.Cell>\n                  <Table.Cell>{namePrev}</Table.Cell>\n                  <Table.Cell>\n                    <Button icon='edit' size='tiny' onClick={() => onClickEdit(index)} />\n                    <Button icon='trash' size='tiny'\n                      disabled={versionReferringFound}\n                      onClick={() => removeVersion(index)}\n                    />\n                    <Button icon='list' size='tiny' onClick={() => onClickPublish(index)} />\n                  </Table.Cell>\n                </Table.Row>\n              )\n            })\n          }\n        </Table.Body>\n      </Table>\n      {\n        version ? (\n          <VersionComponent version={version} versionList={versionList}\n            lineupList={lineupList} pkgList={pkgList} customerList={customerList}\n            onChange={onChangeVersion}\n          />\n        ) : <></>\n      }\n      <Modal open={openModal} onClose={() => setOpenModal(false)}>\n        <Modal.Header>Release history</Modal.Header>\n        <Modal.Content>\n          <Form>\n            <Form.Field>\n              <TextArea value={releaseHistory} rows={24} />\n            </Form.Field>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button icon size='tiny' onClick={() => navigator.clipboard.writeText(releaseHistory)}>\n            <Icon name='clipboard' />\n            Copy to clipboard\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    </>\n  );\n}\n","import { createRef, useState } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport { Container, Form, Header, Menu, Segment } from 'semantic-ui-react';\nimport EnumTable from './components/EnumTable';\nimport PkgTable from './components/PkgTable';\nimport VersionEditor from './components/VersionEditor';\nimport { Enum, Pkg, Version } from './types';\n\nconst UNTITLED = 'Untitled';\n\nconst PANE_VERSION = 'version';\nconst PANE_LINEUP = 'lineup';\nconst PANE_PACKAGE = 'package';\nconst PANE_CUSTOMER = 'customer';\n\nfunction App() {\n  const refLoad = createRef<HTMLInputElement>();\n  let file: File | undefined;\n  const refSave = createRef<HTMLAnchorElement>();\n  const [featureName, setFeatureName] = useState(UNTITLED);\n  const [versionList, setVersionList] = useState<Version[]>([\n    { index: 0, name: 'V1', indexPrev: -1, changeList: [], releaseList: [] },\n    { index: 1, name: 'V2', indexPrev: 0, changeList: [], releaseList: [] },\n    { index: 2, name: 'V3', indexPrev: 1, changeList: [], releaseList: [] },\n  ]);\n  const [lineupList, setLineupList] = useState<Enum[]>([\n    { index: 0, name: '4G' },\n    { index: 1, name: '5G' },\n  ]);\n  const [pkgList, setPkgList] = useState<Pkg[]>([\n    { index: 0, name: 'PKG A', lineupIndex: -1 },\n    { index: 1, name: 'PKG B', lineupIndex: -1 },\n    { index: 2, name: 'PKG C', lineupIndex: -1 },\n    { index: 3, name: 'PKG D', lineupIndex: 0 },\n    { index: 4, name: 'PKG E', lineupIndex: 1 },\n  ]);\n  const [customerList, setCustomerList] = useState<Enum[]>([\n    { index: 0, name: 'AT&T Mobility' },\n    { index: 1, name: 'KDDI' },\n    { index: 2, name: 'KT' },\n    { index: 3, name: 'LGU+' },\n    { index: 4, name: 'SK Telecom' },\n    { index: 5, name: 'TELUS' },\n    { index: 6, name: 'Verizon Wireless' },\n  ]);\n  const [pane, setPane] = useState(PANE_VERSION);\n\n  function onChangeFile(e: React.ChangeEvent<HTMLInputElement>) {\n    const { files } = e.target;\n    if (!files) {\n      return;\n    }\n    file = files[0];\n    if (!file) {\n      return;\n    }\n    reader.readAsText(file);\n  }\n\n  function onClickNew() {\n    setFeatureName(UNTITLED);\n    setVersionList([]);\n    setLineupList([\n      { index: 0, name: '(None)' },\n    ]);\n    setPkgList([]);\n    setCustomerList([]);\n  }\n\n  function onClickSave() {\n    if (refSave.current === null) {\n      return;\n    }\n    const blob = new Blob(\n      [JSON.stringify({ versionList, lineupList, pkgList, customerList })],\n      { type: 'application/json' },\n    );\n    refSave.current.download = `${featureName}.json`;\n    refSave.current.href=window.URL.createObjectURL(blob);\n    refSave.current.click();\n  }\n\n  const reader = new FileReader();\n  reader.onload = (e) => {\n    if (!file) {\n      return;\n    }\n    if (!e.target) {\n      return;\n    }\n    const { result } = e.target;\n    if (result === null || result instanceof ArrayBuffer) {\n      return;\n    }\n    const { name } = file;\n    const indexLast = name.lastIndexOf('.');\n    const featureName = name.substring(0, indexLast);\n    const { versionList, lineupList, pkgList, customerList } = JSON.parse(result);\n    // TODO: Check validity\n    setFeatureName(featureName);\n    setVersionList(versionList);\n    setLineupList(lineupList);\n    setPkgList(pkgList);\n    setCustomerList(customerList);\n  }\n\n  const usedLineupIndexList = [\n    ...versionList.map((version) => {\n      return version.changeList.map((change) => change.lineupIndex);\n    }).reduce((indexPrevList, indexList) => {\n      return [...indexPrevList, ...indexList];\n    }, []),\n    ...pkgList.map((pkg) => pkg.lineupIndex),\n  ];\n  const usedPkgIndexList = [\n    ...versionList.map((version) => {\n      return version.releaseList.map((release) => release.pkgIndex);\n    }).reduce((indexPrevList, indexList) => {\n      return [...indexPrevList, ...indexList];\n    }, []),\n  ];\n  const usedCustomerIndexList = [\n    ...versionList.map((version) => {\n      return version.changeList.map((change) => change.customerIndexList).reduce((indexListPrev, indexList) => {\n        return [\n          ...indexListPrev,\n          ...indexList,\n        ];\n      }, []);\n    }).reduce((indexPrevList, indexList) => {\n      return [...indexPrevList, ...indexList];\n    }, []),\n    ...versionList.map((version) => {\n      return version.releaseList.map((release) => release.customerIndexList).reduce((indexListPrev, indexList) => {\n        return [\n          ...indexListPrev,\n          ...indexList,\n        ];\n      }, []);\n    }).reduce((indexPrevList, indexList) => {\n      return [...indexPrevList, ...indexList];\n    }, []),\n  ];\n\n  return (\n    <div className=\"App\">\n      <Menu pointing>\n        <Menu.Item onClick={onClickNew}>New</Menu.Item>\n        <Menu.Item>\n          <Form>\n            <Form.Field>\n              <input value={featureName} onChange={(e) => setFeatureName(e.target.value)} />\n            </Form.Field>\n          </Form>\n        </Menu.Item>\n        <Menu.Item onClick={() => refLoad.current?.click()}>\n          Load\n        </Menu.Item>\n        <Menu.Item onClick={() => onClickSave()}>\n          Save\n        </Menu.Item>\n        <Menu.Menu position='right'>\n          <Menu.Item\n            active={pane === PANE_VERSION}\n            onClick={() => setPane(PANE_VERSION)}\n          >\n            Versions\n          </Menu.Item>\n          <Menu.Item\n            active={pane === PANE_LINEUP}\n            onClick={() => setPane(PANE_LINEUP)}\n          >\n            Lineups\n          </Menu.Item>\n          <Menu.Item\n            active={pane === PANE_PACKAGE}\n            onClick={() => setPane(PANE_PACKAGE)}\n          >\n            Packages\n          </Menu.Item>\n          <Menu.Item\n            active={pane === PANE_CUSTOMER}\n            onClick={() => setPane(PANE_CUSTOMER)}\n          >\n            Customers\n          </Menu.Item>\n        </Menu.Menu>\n      </Menu>\n      <input type='file' accept='.json' hidden ref={refLoad} onChange={onChangeFile} />\n      {/* eslint-disable-next-line jsx-a11y/anchor-has-content, jsx-a11y/anchor-is-valid */}\n      <a href='#' ref={refSave} hidden />\n      {\n        pane === PANE_VERSION ? (\n          <Container as={Segment}>\n            <Header as='h1'>Versions</Header>\n            <VersionEditor versionList={versionList} onChange={setVersionList} lineupList={lineupList} pkgList={pkgList} customerList={customerList} />\n          </Container>\n        ) : <></>\n      }\n      {\n        pane === PANE_LINEUP ? (\n          <Container as={Segment}>\n            <Header as='h1'>Lineups</Header>\n            <EnumTable title='Lineup' enumList={lineupList} onChange={setLineupList}\n              usedIndexList={usedLineupIndexList}\n            />\n          </Container>\n        ) : <></>\n      }\n      {\n        pane === PANE_PACKAGE ? (\n          <Container as={Segment}>\n            <Header as='h1'>Packages</Header>\n            <PkgTable pkgList={pkgList} lineupList={lineupList} onChange={setPkgList}\n              usedPkgIndexList={usedPkgIndexList}\n            />\n          </Container>\n        ) : <></>\n      }\n      {\n        pane === PANE_CUSTOMER ? (\n          <Container as={Segment}>\n            <Header as='h1'>Customers</Header>\n            <EnumTable title='Customer' enumList={customerList} onChange={setCustomerList}\n              usedIndexList={usedCustomerIndexList}\n            />\n          </Container>\n        ) : <></>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}